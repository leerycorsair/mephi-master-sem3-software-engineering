// Code generated by MockGen. DO NOT EDIT.
// Source: restoraunt/internal/service/payment (interfaces: Menu)
//
// Generated by this command:
//
//	mockgen -destination mocks/menu.go -package mocks . Menu
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMenu is a mock of Menu interface.
type MockMenu struct {
	ctrl     *gomock.Controller
	recorder *MockMenuMockRecorder
}

// MockMenuMockRecorder is the mock recorder for MockMenu.
type MockMenuMockRecorder struct {
	mock *MockMenu
}

// NewMockMenu creates a new mock instance.
func NewMockMenu(ctrl *gomock.Controller) *MockMenu {
	mock := &MockMenu{ctrl: ctrl}
	mock.recorder = &MockMenuMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenu) EXPECT() *MockMenuMockRecorder {
	return m.recorder
}

// GetItemPrice mocks base method.
func (m *MockMenu) GetItemPrice(arg0 context.Context, arg1 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemPrice", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemPrice indicates an expected call of GetItemPrice.
func (mr *MockMenuMockRecorder) GetItemPrice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemPrice", reflect.TypeOf((*MockMenu)(nil).GetItemPrice), arg0, arg1)
}
